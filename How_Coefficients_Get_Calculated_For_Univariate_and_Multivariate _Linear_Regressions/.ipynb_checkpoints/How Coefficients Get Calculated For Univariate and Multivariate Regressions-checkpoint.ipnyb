{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33e4edc2-f090-44c0-a7ba-8248a05e0ee5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import sklearn.datasets\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e37dc50-30e9-4ba5-a4cb-c5fc86e35914",
   "metadata": {},
   "source": [
    "# Demo For Linear Regression - Continuous Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ccd96c1-659b-434f-9862-7089eb473e73",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_california_housing\n",
    "cal_housing = fetch_california_housing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66f9ba91-de40-4dee-821f-f4ae3d958b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MedInc</th>\n",
       "      <th>HouseAge</th>\n",
       "      <th>AveRooms</th>\n",
       "      <th>AveBedrms</th>\n",
       "      <th>Population</th>\n",
       "      <th>AveOccup</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Average_Price_(100ks)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.3252</td>\n",
       "      <td>41.0</td>\n",
       "      <td>6.984127</td>\n",
       "      <td>1.023810</td>\n",
       "      <td>322.0</td>\n",
       "      <td>2.555556</td>\n",
       "      <td>37.88</td>\n",
       "      <td>-122.23</td>\n",
       "      <td>4.526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.3014</td>\n",
       "      <td>21.0</td>\n",
       "      <td>6.238137</td>\n",
       "      <td>0.971880</td>\n",
       "      <td>2401.0</td>\n",
       "      <td>2.109842</td>\n",
       "      <td>37.86</td>\n",
       "      <td>-122.22</td>\n",
       "      <td>3.585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.2574</td>\n",
       "      <td>52.0</td>\n",
       "      <td>8.288136</td>\n",
       "      <td>1.073446</td>\n",
       "      <td>496.0</td>\n",
       "      <td>2.802260</td>\n",
       "      <td>37.85</td>\n",
       "      <td>-122.24</td>\n",
       "      <td>3.521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.6431</td>\n",
       "      <td>52.0</td>\n",
       "      <td>5.817352</td>\n",
       "      <td>1.073059</td>\n",
       "      <td>558.0</td>\n",
       "      <td>2.547945</td>\n",
       "      <td>37.85</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>3.413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.8462</td>\n",
       "      <td>52.0</td>\n",
       "      <td>6.281853</td>\n",
       "      <td>1.081081</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.181467</td>\n",
       "      <td>37.85</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>3.422</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
       "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
       "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
       "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
       "3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
       "4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
       "\n",
       "   Longitude  Average_Price_(100ks)  \n",
       "0    -122.23                  4.526  \n",
       "1    -122.22                  3.585  \n",
       "2    -122.24                  3.521  \n",
       "3    -122.25                  3.413  \n",
       "4    -122.25                  3.422  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_housing_df = pd.DataFrame(cal_housing.data, columns = cal_housing.feature_names)\n",
    "cal_housing_df['AvePrice(100ks)'] = cal_housing.target\n",
    "\n",
    "# Rename columns with underscores\n",
    "for col in cal_housing_df.columns:\n",
    "    cal_housing_df.rename(columns = {col: col.replace(' ', '_')}, inplace = True)\n",
    "    \n",
    "cal_housing_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40d1f005-adf7-42be-91dd-0a09ed29c1c0",
   "metadata": {},
   "source": [
    "# Anova for Linear Regression (univariate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da5562ce-5a73-47b1-ace9-861eeaa7c242",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'diabetes_dataset_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m X_dia_uni \u001b[38;5;241m=\u001b[39m \u001b[43mdiabetes_dataset_df\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m      2\u001b[0m X_dia_uni\u001b[38;5;241m.\u001b[39mhead()\n",
      "\u001b[0;31mNameError\u001b[0m: name 'diabetes_dataset_df' is not defined"
     ]
    }
   ],
   "source": [
    "X_dia_uni = diabetes_dataset_df['age']\n",
    "X_dia_uni.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12c9206c-5b7c-4ac0-b4e4-2eed1922b51b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_dia = diabetes_dataset_df['disease_progression']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c6bb696-1cca-478b-8137-7363be9b46c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_dia_uni_anova = sm.add_constant(X_dia_uni)\n",
    "model = sm.OLS(y_dia, X_dia_uni_anova)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc0c53f6-4fe5-4570-afaa-2b9df6bca3c1",
   "metadata": {},
   "source": [
    "# Anova for Linear Regression (multi-variate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33924bb6-e6ce-4fa2-9fbc-70138160d82f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_dia_multi = diabetes_dataset_df.drop('disease_progression', axis = 1)\n",
    "X_dia_multi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dead454-0cd2-449e-b402-ef0e668af96a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_dia_multi_anova = sm.add_constant(X_dia_multi)\n",
    "model = sm.OLS(y_dia, X_dia_multi_anova)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df3dbb1c-85af-4f0e-95c3-223193d26489",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax = plt.gcf()\n",
    "ax.set_size_inches(22, 10)\n",
    "ax = sns.barplot(data = diabetes_dataset_df, x = 'sex', y = 'disease_progression', ci = None)\n",
    "plt.title('Sex Against Disease Progression Findings', size = 30)\n",
    "plt.xlabel('Sex', size = 22)\n",
    "plt.ylabel('Disease Progression Rate', size = 22)\n",
    "ax;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "821d3b05-7fdc-4df9-9042-993cc308b4c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "diabetes_dataset_df.groupby('sex').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3af6a52f-d8b6-4b3c-97b2-df151c5696fd",
   "metadata": {},
   "source": [
    "# Demo For Logistic Regression - Binary Categorical Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fa4c665-c4eb-4d0a-937f-d60b4fbc1161",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_dataset = sklearn.datasets.load_breast_cancer() #binary-class example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea953960-fc97-4075-af41-8c81b8a52858",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_dataset_df = pd.DataFrame(bc_dataset.data, columns = bc_dataset.feature_names)\n",
    "bc_dataset_df['cancer'] = bc_dataset.target\n",
    "\n",
    "# Rename columns with underscores\n",
    "for col in bc_dataset_df.columns:\n",
    "    bc_dataset_df.rename(columns = {col: col.replace(' ', '_')}, inplace = True)\n",
    "    \n",
    "bc_dataset_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68c7cbce-2bba-4747-9fc7-6148df200a76",
   "metadata": {},
   "outputs": [],
   "source": [
    "bc_dataset_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "170a1ecc-e651-4738-baf2-05a2a0615ac9",
   "metadata": {},
   "source": [
    "# ANOVA For Logistic Regression (Binary)\n",
    "I will only use the first three columns to avoid the model iterating too many times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b817e47a-30c6-4f15-87d4-9d1bde6dcba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_bc_anova = bc_dataset_df[['mean_radius', 'mean_texture','mean_perimeter']]\n",
    "X_bc_anova.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a051e82a-06d5-43ae-8858-08f5554546dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_bc_anova = bc_dataset_df[['cancer']]\n",
    "y_bc_anova.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b006445-f74f-4ce0-ac44-8a281c203e29",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = sm.Logit(y_bc_anova, X_bc_anova)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae5adb1-5fe7-4de5-8986-53652a519c24",
   "metadata": {},
   "source": [
    "# Demo For Logistic Regression - Trinary Categorical Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48ac4423-90d1-4647-8abf-2246741d9408",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_dataset = sklearn.datasets.load_iris(as_frame = True) #trinary-class example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "168d2ba1-cd54-4c99-be18-d6445618eac6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#iris_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dced0b81-be90-419a-9432-4ff5f5c7320d",
   "metadata": {},
   "source": [
    "Target species per target_names documentation above:\n",
    "0 - setosa\n",
    "1 - versicolor\n",
    "2 - virginica"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd3cb88a-cc14-4272-9a64-1c66fcafe136",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_dataset_df = pd.DataFrame(iris_dataset.data, columns = iris_dataset.feature_names)\n",
    "iris_dataset_df['species'] = iris_dataset.target\n",
    "\n",
    "# Rename columns with underscores\n",
    "for col in iris_dataset_df.columns:\n",
    "    iris_dataset_df.rename(columns = {col: col.replace(' ', '_')}, inplace = True)\n",
    "    \n",
    "iris_dataset_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a9d55e7-855a-4b10-9df4-988036c3d9b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_dataset_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f7a129a-e719-414b-a68a-9fb36f8a2858",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_dataset_df['species'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ee87459-9494-4b12-a26e-9795d9e4b84d",
   "metadata": {
    "tags": []
   },
   "source": [
    "# ANOVA For Logistic Regression (Trinary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2432bd1c-0a55-4567-8846-c48aceb1a71b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_iris = iris_dataset_df.drop('species', axis = 1)\n",
    "X_iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60e8c5b9-63db-4d9d-b9e7-a810a95f240b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_iris_anova = iris_dataset_df[['species']]\n",
    "y_iris_anova.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8019985-d65f-4cd8-9e71-092fb48d34a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_iris_multi = iris_dataset_df[['sepal_length_(cm)']]\n",
    "X_iris_multi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de35cf7a-94b1-4787-a103-77a5b5ea5e93",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_iris_anova = sm.add_constant(X_iris_multi)\n",
    "model = sm.MNLogit(y_iris_anova, X_iris_anova)\n",
    "results = model.fit(method = 'bfgs')\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99df111f-bfe4-486c-bdc2-76b2560f4285",
   "metadata": {},
   "source": [
    "# Excel Outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "270cd28a-d321-4092-a341-d5fcf10fcc25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Output to excel for cross-validation with regression tool there\n",
    "cal_housing_df.to_excel('cal_housing.xlsx', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc09bde9-9313-4419-a9d8-a07aa91af705",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
